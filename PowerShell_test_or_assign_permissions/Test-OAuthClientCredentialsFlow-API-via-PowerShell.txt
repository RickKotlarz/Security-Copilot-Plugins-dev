# Author: Rick Kotlarz & GPT-4o
#
# Use this basic script to test OAuthClientCredentialsFlow to an API endpoint using a simple GET request
#  https://github.com/search?q=repo%3AAzure%2FSecurity-Copilot+OAuthClientCredentialsFlow&type=code
#
# Register your App in Entra first, then use grant permissions and use the following.
# OAuthClientCredentialsFlow is used for Applicaiton permissions not user delegated permissions
# The following Powershell can be used to test "Application" authentication as denoted in the Entra Registered app permissions

# Prompt for credentials
$clientId = "Replace with your Client ID"
$tenantId = "Replace with your Tenant ID"
$clientSecret = Read-Host "Enter your Client Secret" -AsSecureString

##################################################################################################################
##################################################################################################################
##################################################################################################################
#
# The above line require user input. Don't hardcard your clientSecret!
#
##################################################################################################################
##################################################################################################################
##################################################################################################################

# Convert secure string to plain text
$plainClientSecret = [Runtime.InteropServices.Marshal]::PtrToStringAuto(
    [Runtime.InteropServices.Marshal]::SecureStringToBSTR($clientSecret))

# Token endpoint for Microsoft identity platform
$tokenUrl = "https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token"

# Set body parameters for client credentials flow
$body = @{
    grant_type    = "client_credentials"
    client_id     = $clientId
    client_secret = $plainClientSecret
    scope         = "https://graph.microsoft.com/.default"
}

# Get the token
$tokenResponse = Invoke-RestMethod -Method Post -Uri $tokenUrl -Body $body -ContentType "application/x-www-form-urlencoded"
$accessToken = $tokenResponse.access_token

# Set headers using the access token
$headers = @{
    "Authorization" = "Bearer $accessToken"
    "Accept"        = "application/json"
}

# Test API call (you can replace this with Graph API or any protected resource)
$response = Invoke-RestMethod -Uri 'https://graph.microsoft.com/v1.0/users' -Method GET -Headers $headers

# Print response
$response | ConvertTo-Json -Depth 10 | ForEach-Object { $_ }
